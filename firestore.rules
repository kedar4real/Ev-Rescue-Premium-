rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow service providers to read basic user info for emergency requests
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         resource.data.role == 'provider' || 
         exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)));
    }
    
    // Emergency requests - users can create, read their own
    match /emergencyRequests/{requestId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.providerId == request.auth.uid ||
         exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)));
      allow delete: if false; // No one can delete emergency requests
    }
    
    // Service providers collection
    match /serviceProviders/{providerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == providerId;
    }
    
    // Service history - users can read their own, providers can read assigned
    match /serviceHistory/{historyId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.providerId == request.auth.uid ||
         exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)));
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.providerId == request.auth.uid);
    }
    
    // Fleet management - only service providers can access
    match /fleet/{vehicleId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid));
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid));
    }
    
    // Charging stations - public read, authenticated create/update
    match /chargingStations/{stationId} {
      allow read: if true; // Public access for finding stations
      allow create, update: if request.auth != null;
      allow delete: if false; // No deletion of charging stations
    }
    
    // User subscriptions and payments
    match /subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Support tickets - users can create and read their own
    match /supportTickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.assignedTo == request.auth.uid ||
         exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)));
    }
    
    // Chat messages - users can read/write in conversations they're part of
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.providerId == request.auth.uid ||
         exists(/databases/$(database)/documents/conversations/$(conversationId)/participants/$(request.auth.uid)));
    }
    
    // Conversation metadata
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.providerId == request.auth.uid);
    }
    
    // Analytics data - only service providers and admins
    match /analytics/{analyticsId} {
      allow read: if request.auth != null && 
        (exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)) ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)/role) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if false; // Analytics are read-only
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
